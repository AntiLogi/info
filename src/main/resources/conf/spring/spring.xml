<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:prop/db.properties</value>

            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <context:component-scan base-package="com.bdqnsh.student"/>

    <!--数据源配置-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${url}" />
        <property name="username" value="${userName}" />
        <property name="password" value="${password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>


    <!-- 引入spring-jdbcjar包的事务管理类 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--启动注解事务控制-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 通过AOP拦截器方式管理事物 -->
   <!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>-->
    <!-- 告知事务管理器 你的事务控制在哪个包下面
    <aop:config>
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* com.dc.*.service.*.*(..)) " />
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice" />
    </aop:config>-->



    <!-- ========================================针对myBatis的配置项============================== -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:conf/mybatis/mybatis.xml" />
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.bdqnsh.student.dao" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>


    <!-- redis连接池配置
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        &lt;!&ndash; 最大Idle&ndash;&gt;
        <property name="maxIdle" value="${redis.maxIdle}" />
        &lt;!&ndash; 最小Idle&ndash;&gt;
        <property name="minIdle" value="${redis.minIdle}" />
        &lt;!&ndash;最大等待wait时间&ndash;&gt;
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        &lt;!&ndash; 说明一个pool可以有多少个Jedis实例 &ndash;&gt;
        <property name="maxTotal" value="${redis.maxActive}" />
        &lt;!&ndash; 获得一个jedis实例的时候是否检查连接可用性（ping()） &ndash;&gt;
        <property name="testOnBorrow" value="${redis.testOneBorrow}" />
        &lt;!&ndash; return 一个jedis实例给pool时，是否检查连接可用性（ping()） &ndash;&gt;
        <property name="testOnReturn" value="${redis.testOnReturn}" />

    </bean>

    &lt;!&ndash;redis 数据源配置&ndash;&gt;
    <bean id="shardedJedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="poolConfig"/>
        <constructor-arg index="1" value="${redis.url}"/>
        <constructor-arg index="2" value="${redis.port}"/>
        <constructor-arg index="3" value="${redis.timeout}"/>
        <constructor-arg index="4" value="${redis.password}"/>
    </bean>-->

    <task:scheduler id="scheduler"/>
    <task:annotation-driven scheduler="scheduler"/>


</beans>